version: '3.6'

services:
  traefik:
    # The official v2.1 Traefik docker image
    image: traefik:v${DOCKER_VERSION}
    # Enables the web UI and tells Traefik to listen to docker
    command: 
      - "--api.insecure=true"
      # - "--providers.file.filename=/dynamic_conf.toml"
      # - "--providers.file.watch=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.swarmMode=true"
      - '--providers.docker.constraints=Label(`traefik.tag`, `swarm`)'
      - "--log"
      - "--log.level=DEBUG"
      - "--entrypoints.traefik.address=:5081"
      - "--entrypoints.web-secure.address=:443"
      - "--entrypoints.web.address=:80"
      - "--certificatesResolvers.le.acme.email=admin@${HOST_NAME}"
      - "--certificatesResolvers.le.acme.storage=/traefik-acme/acme.json"
      - "--certificatesResolvers.le.acme.httpChallenge=true"
      - "--certificatesResolvers.le.acme.httpChallenge.entryPoint=web"
    ports:
      # The HTTP port
      - target: 80
        published: 80
        protocol: tcp
        mode: host
      # The HTTPS port
      - target: 443
        published: 443
        protocol: tcp
        mode: host
      # - "5081:5081"
    volumes:
      # So that Traefik can listen to the Docker events
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik-acme:/traefik-acme/
    networks:
      - swarm
    deploy:
          mode: replicated
          replicas: 1
          labels: 
            - traefik.enable=true
            - traefik.tag=swarm
            - traefik.docker.network=swarm
            #Api
            - traefik.http.routers.traefik-api.entryPoints=web-secure
            - traefik.http.routers.traefik-api.rule=(Host(`raspberrypi.${HOST_NAME}`) && PathPrefix(`/api`) && Headers(`referer`, `https://raspberrypi.${HOST_NAME}/dashboard/`) )  || ( Host(`${HOST_NAME}`) && PathPrefix(`/api`) && Headers(`referer`, `https://${HOST_NAME}/dashboard/`) ) 
            - traefik.http.routers.traefik-api.service=api@internal
            - traefik.http.routers.traefik-api.tls.certresolver=le
            - traefik.http.routers.traefik-api.middlewares=intranet-ipwhitelist,compress,ratelimit
            #Dashboard
            - traefik.http.routers.traefik-dashboard.entryPoints=web-secure
            - traefik.http.routers.traefik-dashboard.rule=(Host(`raspberrypi.${HOST_NAME}`) && PathPrefix(`/dashboard`)) || (Host(`${HOST_NAME}`) && PathPrefix(`/dashboard`))
            - traefik.http.routers.traefik-dashboard.service=api@internal
            - traefik.http.routers.traefik-dashboard.tls.certresolver=le
            - traefik.http.routers.traefik-dashboard.middlewares=intranet-ipwhitelist,compress,ratelimit
            # global redirect to https
            - traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`) 
            - traefik.http.routers.http-catchall.entrypoints=web,web-secure
            - traefik.http.routers.http-catchall.middlewares=redirect-to-https
            # global redirect to https2
            - traefik.http.routers.http-catchall-2.rule=hostregexp(`{host:.+}`)
            - traefik.http.routers.http-catchall-2.entrypoints=web
            - traefik.http.routers.http-catchall-2.middlewares=redirect-to-https
            - traefik.http.routers.http-catchall-2.tls.certresolver=le
            # middleware utilities
            - traefik.http.middlewares.intranet-ipwhitelist.ipwhitelist.sourcerange=127.0.0.1/32, 10.0.0.0/8, 192.168.0.0/16
            - traefik.http.middlewares.compress.compress=true
            - traefik.http.middlewares.ratelimit.ratelimit.average=100
            - traefik.http.middlewares.ratelimit.ratelimit.burst=50
            # middleware redirect
            - traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https
            - traefik.http.services.reverseproxy-traefik.loadbalancer.server.port=80
          # service restart policy
          restart_policy:
            condition: on-failure
            delay: 5s
            max_attempts: 3
            window: 120s
          # service update configuration
          update_config:
            parallelism: 1
            delay: 30s
            failure_action: continue
            monitor: 60s
            max_failure_ratio: 0.3
            order: stop-first
          # placement constraint - in this case on 'worker' nodes only
          placement:
            constraints: [node.role == manager]
networks:
  swarm:
    external: true
volumes:
  traefik-acme: